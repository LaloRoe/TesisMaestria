import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
from matplotlib.colors import LinearSegmentedColormap  # Para crear mapas de colores personalizados
from matplotlib.widgets import Button

import sympy as sp
import basicdifeq as bde
import math

plt.ioff()  # Desactiva el modo interactivo de matplotlib

################################################################################
# VARIABLES
pasos_rk = 3000
parametros = {}

###############################################################################
# SISTEMA DE ECUACIONES DIFERENCIALES PREDEFINIDOS
sistemas_predefinidos = {
    1: ("Van der Pol","y","mu*(1-x**2)*y - x", ["mu"]),
    2: ("Lotka-Volterra", "a*x - b*x*y", "c*x*y - d*y", ["a", "b", "c", "d"]),
    3: ("Rayleigh","y","mu*(1-y**2)*y - x", ["mu"]),
    4: ("FitzHugh-Nagumo", "x - (x**3)/3 - y + I", "epsilon*(x + a - b*y)", ["I", "epsilon", "a", "b"])
}
###############################################################################
# OBTENER LA EXPRESIÓN DE LA ECUACIÓN DIFERENCIAL
tiempo_negativo = input("¿Desea graficar el tiempo negativo? (s/n): ").lower()
seleccionar_sistema = input("Elije una opción: \n 1. Seleccionar un sistema predefinido \n 2. Ingresar un sistema manualmente \n 3. Ingresar la matriz de coeficientes \n =").lower()
if seleccionar_sistema == "1":
    print("Selecciona un sistema:\n")
    for key, value in sistemas_predefinidos.items():
        print(f"{key}. {value[0]}")
    sistema = int(input(" = ")) # Opción seleccionada 
    print(f"El sistema {sistemas_predefinidos[sistema][0]} se expresa como:")
    print(f"dx/dt = {sistemas_predefinidos[sistema][1]}")
    print(f"dy/dt = {sistemas_predefinidos[sistema][2]}")
    print("Ingresa el valor del parámetro:")
    
    for i in sistemas_predefinidos[sistema][3]: # Parámetros del sistema
        exec(f"{i}=float(input('{i} = '))")
        parametros[i] = eval(i)
    print("Sistema seleccionado:")
    f1_original = sistemas_predefinidos[sistema][1]
    f2_original = sistemas_predefinidos[sistema][2]
    nombre = sistemas_predefinidos[sistema][0]
elif seleccionar_sistema == "2":
    f1_original = input("dx/dt = ")
    f2_original = input("dy/dt = ")
    nombre = input("Ingresar el nombre del sistema = ")
    print(f"El sistema {nombre} se expresa como:")
    print(f"dx/dt = {f1_original}")
    print(f"dy/dt = {f2_original}")
elif seleccionar_sistema == "3":
    print("¿Su sistema requiere de parámetros?")
    respuesta = input("(s/n): ").lower()
    # Estructura de los parámetros {"nombre":valor}
    parametros = {}
    while respuesta == "s":
        nombre_parametro = input("Ingresar el nombre del parámetro: ")
        valor_parametro = input("Ingresar el valor del parámetro: ")
        parametros[nombre_parametro] = float(valor_parametro)
        respuesta = input("¿Desea ingresar otro parámetro? (s/n): ").lower()
    A = input("Ingresar la matriz de coeficientes de dx/dt: ")
    B = input("Ingresar la matriz de coeficientes de dy/dt: ")
    print(B)
    for key, value in parametros.items():
        exec(f"{key} = float(value)")
    A = eval(A)
    B = eval(B)
    f1_original = bde.hilbert_system(A)
    f2_original = bde.hilbert_system(B)
    nombre = input("Ingresar el nombre del sistema = ")
    R = bde.average_system(A,B)
    print(R)
    R_poly = bde.polynomial_averaging(R)
    theta_poly = "math.pi/2"
    print(f"Sistema: {nombre}")
    print(f"La matriz de coeficientes de dx/dt es: {A}")
    print(f"La matriz de coeficientes de dy/dt es: {B}")
    print("Differential equations system:")
    print(f"dx/dt = {f1_original}")
    print(f"dy/dt = {f2_original}")
    print(f"Average differential equation system: r' = {R_poly}, theta' = {theta_poly}")
linealizar = input("¿Desea linealizar el sistema? (s/n): ").lower()
nulclinas = input("¿Desea calcular las nulclinas? (s/n): ").lower()
###############################################################################
x, y = sp.symbols('x y')
f1 = eval(f1_original)
f2 = eval(f2_original)
###############################################################################
# JACOBIANO
if linealizar == "s": 
    # Calcular Jacobiano
    J = bde.calcular_jacobiano(f1, f2, [x, y])

    print("Matriz Jacobiana del sistema:")
    sp.pprint(J)
    
    # Evaluar en un punto de equilibrio (ejemplo en (0,0))
    J_eq = J.subs({x: 0, y: 0})
    print("\nJacobiano evaluado en (0,0):")
    sp.pprint(J_eq)
    
    # Calcular valores propios (para análisis de estabilidad)
    eigenvals = J_eq.eigenvals()
    print("\nValores propios en (0,0):")
    sp.pprint(eigenvals)

    # Sistema linealizado
    f1_linealizado = str(np.array(J_eq)[0][0] * x + np.array(J_eq)[0][1] * y)
    f2_linealizado = str(np.array(J_eq)[1][0] * x + np.array(J_eq)[1][1] * y)
    print("\nSistema linealizado:")
    print(f"dx/dt = {f1_linealizado}")
    print(f"dy/dt = {f2_linealizado}")
###############################################################################
# NULCLINAS
if nulclinas == "s":
    # Calcular nulclinas
    nulclina_x = sp.solve(f1, y)  # Resuelve dx/dt = 0 para y
    nulclina_y = sp.solve(f2, y)  # Resuelve dy/dt = 0 para y

    print("Nulclinas:")
    print(f"Nulclina de x (dx/dt = 0): y = {nulclina_x}")
    print(f"Nulclina de y (dy/dt = 0): y = {nulclina_y}")
###############################################################################
# GRAFICAR EL CAMPO VECTORIAL
Lx_inf = float(input("Límite inferior de x: "))
Lx_sup = float(input("Límite superior de x: "))
Ly_inf = float(input("Límite inferior de y: "))
Ly_sup = float(input("Límite superior de y: "))

n = int(input("Número de puntos: "))  # Número de puntos en cada lado de la cuadrícula
x_grid = np.linspace(Lx_inf, Lx_sup, n)  # Crea un vector de n puntos entre -L y L
y_grid = np.linspace(Ly_inf, Ly_sup, n)  # Crea un vector de n puntos entre -L y L
X, Y = np.meshgrid(x_grid, y_grid)  # Crea la cuadrícula

# Convertir las expresiones en funciones evaluables
f1_func = sp.lambdify((x, y), f1, 'numpy')
f2_func = sp.lambdify((x, y), f2, 'numpy')

# Calcula las derivadas en cada punto de la cuadrícula
dX = f1_func(X, Y)
dY = f2_func(X, Y)

# Verificar que dX y dY sean matrices de números válidos
if not np.all(np.isfinite(dX)) or not np.all(np.isfinite(dY)):
    raise ValueError("Las derivadas contienen valores no finitos (NaN o inf).")

# Graficar el campo vectorial
fig, ax = plt.subplots(figsize=(10, 10))
q = ax.quiver(X, Y, dX, dY, units='x', pivot='tip', width=0.009, scale=30)
ax.quiverkey(q, 0.9, 0.9, 1, label='Plano fase', labelpos='E', coordinates='figure')
ax.set_title(f'{nombre}')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_xlim(Lx_inf, Lx_sup)
ax.set_ylim(Ly_inf, Ly_sup)
plt.legend()
plt.grid(True)

###############################################################################
# GRAFICAR LAS NULCLINAS
if nulclinas == "s":
    v = np.linspace(Lx_inf, Lx_sup, 500)
    
    # Nulclina de x
    for sol in nulclina_x:
        y_values = sp.lambdify(x, sol, 'numpy')(v)
        if np.isscalar(y_values):  # Si es escalar, crear arreglo
            y_values = np.full_like(v, y_values)
        plt.plot(v, y_values, label=f"Nulclina de x: {sol}", color="blue", linestyle="--")
    
    # Nulclina de y
    for sol in nulclina_y:
        y_values = sp.lambdify(x, sol, 'numpy')(v)
        if np.isscalar(y_values):
            y_values = np.full_like(v, y_values)
        plt.plot(v, y_values, label=f"Nulclina de y: {sol}", color="red", linestyle="--")

###############################################################################
# Configuración del gráfico
plt.axhline(0, color="gray", linestyle="--", linewidth=0.5)
plt.axvline(0, color="gray", linestyle="--", linewidth=0.5)

###############################################################################
# Crear un mapa de colores personalizado (naranja a morado)
custom_cmap = LinearSegmentedColormap.from_list("naranja_a_morado", ["orange", "purple"])
custom_cmap_polar = LinearSegmentedColormap.from_list("amarillo_a_azul", ["yellow", "blue"])
custom_cmap_neg = LinearSegmentedColormap.from_list("rojo_a_verde", ["green", "blue"])
# CLICKS
z0 = []
z0_polar = []

# Función que maneja el evento de clic
def onclick(event):
    if event.inaxes:
        x, y = event.xdata, event.ydata
        r = np.sqrt(x**2 + y**2)
        theta = np.arctan2(y, x)
        print(f"Coordenada seleccionada: ({x:.2f}, {y:.2f})")
        z0.append((x, y))
        y0 = [x, y]
        z0_polar.append((r, theta))
        r0 = [r,theta]

        
        
        # Marcar el punto en la gráfica
        ax.plot(x, y, 'ro')  # Punto rojo
        
        # Plano fase del sistema original
        z_rk = bde.runge_kutta(f1_original, f2_original, y0, 0.1, pasos_rk, parametros)
        x_rk = z_rk[0, :]
        y_rk = z_rk[1, :]

        # Plano fase del sistema original con tiempo negativo
        if tiempo_negativo == "s":
            z_rk_neg = bde.runge_kutta(f1_original, f2_original, y0, -0.1, pasos_rk, parametros)
            x_rk_neg = z_rk_neg[0, :]
            y_rk_neg = z_rk_neg[1, :]

        # Plano fase del sistema promedio
        if seleccionar_sistema == "3":
            z_rk_polar = bde.runge_kutta(R_poly, theta_poly, r0, 0.1, pasos_rk,type="polar")
            r_rk_polar = z_rk_polar[0, :]
            theta_rk_polar = z_rk_polar[1, :]
            x_rk_polar = r_rk_polar * np.cos(theta_rk_polar)
            y_rk_polar = r_rk_polar * np.sin(theta_rk_polar)
             
            # Crear un gradiente para la trayectoria polar
            points = np.array([x_rk_polar, y_rk_polar]).T.reshape(-1, 1, 2)
            segments = np.concatenate([points[:-1], points[1:]], axis=1)
            norm = plt.Normalize(0, len(x_rk_polar))
            lc = LineCollection(segments, cmap=custom_cmap_polar, norm=norm)  # Usar el mapa personalizado
            lc.set_array(np.arange(len(x_rk_polar)))
            lc.set_linewidth(2)
            ax.add_collection(lc)

        # Crear un gradiente para la trayectoria original
        points = np.array([x_rk, y_rk]).T.reshape(-1, 1, 2)
        segments = np.concatenate([points[:-1], points[1:]], axis=1)
        norm = plt.Normalize(0, len(x_rk))
        lc = LineCollection(segments, cmap=custom_cmap, norm=norm)  # Usar el mapa personalizado
        lc.set_array(np.arange(len(x_rk)))
        lc.set_linewidth(2)
        ax.add_collection(lc)

        # Crear un gradiente para la trayectoria original con tiempo negativo
        if tiempo_negativo == "s":
            points = np.array([x_rk_neg, y_rk_neg]).T.reshape(-1, 1, 2)
            segments = np.concatenate([points[:-1], points[1:]], axis=1)
            norm = plt.Normalize(0, len(x_rk_neg))
            lc = LineCollection(segments, cmap=custom_cmap_neg, norm=norm)  # Usar el mapa personalizado
            lc.set_array(np.arange(len(x_rk_neg)))
            lc.set_linewidth(2)
            ax.add_collection(lc)
        
        # Plano fase del sistema linealizado
        if linealizar == "s":
            z_rk_lineal=bde.runge_kutta(f1_linealizado,f2_linealizado,y0,0.1,pasos_rk,parametros)
            x_rk_lineal=z_rk_lineal[0,:]
            y_rk_lineal=z_rk_lineal[1,:]
            plt.plot(x_rk_lineal, y_rk_lineal, color='red')
        
        fig.canvas.draw()  # Actualizar la gráfica inmediatamente

# Conectar el evento de clic a la función onclick
cid = fig.canvas.mpl_connect('button_press_event', onclick)
fig.canvas.mpl_connect('key_press_event', bde.on_key_press)

plt.show()

