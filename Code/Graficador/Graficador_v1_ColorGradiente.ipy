import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
from matplotlib.colors import LinearSegmentedColormap  # Para crear mapas de colores personalizados
from matplotlib.widgets import Button

import sympy as sp
import basicdifeq as bde
import math

plt.ion()  # Activa el modo interactivo de matplotlib

################################################################################
# VARIABLES
pasos_rk = 5000
parametros = {}
tamaño_paso = 0.01

###############################################################################
# SISTEMA DE ECUACIONES DIFERENCIALES PREDEFINIDOS
sistemas_predefinidos = {
    1: ("Van der Pol","y","epsilon*(1-x**2)*y - x", ["epsilon"]),
    2: ("Lotka-Volterra", "a*x - b*x*y", "c*x*y - d*y", ["a", "b", "c", "d"]),
    3: ("Rayleigh","y","mu*(1-y**2)*y - x", ["mu"]),
    4: ("FitzHugh-Nagumo", "x - (x**3)/3 - y + I", "epsilon*(x + a - b*y)", ["I", "epsilon", "a", "b"])
}
###############################################################################
# OBTENER LA EXPRESIÓN DE LA ECUACIÓN DIFERENCIAL
# MENU PRINCIPAL
print("> Elije una opción:\n \n 1. Seleccionar un sistema predefinido \n 2. Ingresar un sistema manualmente \n 3. Sistema perturbado ")
seleccionar_sistema = input("= ").lower()
# Manejo de errores
while seleccionar_sistema not in ["1", "2", "3"]:
    print("⚠️  Error: Por favor, ingrese una opción válida.")
    seleccionar_sistema = input("= ").lower()
# Configuración de un sistema predefinido
if seleccionar_sistema == "1":
    print("\n> Selecciona un sistema:\n")

    for key, value in sistemas_predefinidos.items():
        print(f" {key}. {value[0]}")
    while True:
        try:
            # Pedir al usuario que ingrese un valor
            sistema = int(input(" = "))  # Intentar convertir la entrada a un entero
            if sistema in [1, 2, 3, 4]:  # Verificar que esté en el rango permitido
                break
            else:
                print("⚠️  Error: Por favor, ingrese un número entre 1 y 4.")
        except ValueError:
            # Capturar el error si la entrada no es un número
            print("⚠️  Error: Por favor, ingrese un número.")
    print(f"\nEl sistema {sistemas_predefinidos[sistema][0]} se expresa como:\n")
    print(f"dx/dt = {sistemas_predefinidos[sistema][1]}")
    print(f"dy/dt = {sistemas_predefinidos[sistema][2]}")
    print("\n> Ingresa el valor del parámetro:\n")
    # Asignación de valores a los parámetros con manejo de errores
    #parametros = {}  # Diccionario para almacenar los parámetros
    for i in sistemas_predefinidos[sistema][3]:
        # Pedir al usuario que ingrese el valor
        exec(f"{i}=bde.obtener_numero_valido('{i} = ')")
        parametros[i] = eval(i)
        #valor = bde.obtener_numero_valido(f"{i} = ")
        #parametros[i] = valor  # Guardar el valor en el diccionario
    # Asignación de las expresiones de las ecuaciones diferenciales
    f1_original = sistemas_predefinidos[sistema][1]
    f2_original = sistemas_predefinidos[sistema][2]
    nombre = sistemas_predefinidos[sistema][0]
# Configuración de un sistema manual
elif seleccionar_sistema == "2":
    print("\n> Ingresa las expresiones de las ecuaciones diferenciales:\n")
    # Solicitar las expresiones con manejo de errores
    f1_original = bde.obtener_expresion_polinomial_valida("dx/dt = ")
    f2_original = bde.obtener_expresion_polinomial_valida("dy/dt = ")
    nombre = input("Ingresar el nombre del sistema = ")
# Configuración de un sistema perturbado
elif seleccionar_sistema == "3":
    print("\nEl sistema se expresa como:\n")
    print("dx/dt = y + epsilon*Q(x,y)	")
    print("dy/dt = -x + epsilon*P(x,y)")
    print("\n> Ingresa el valor del parámetro epsilon y los polinomios P(x,y) y Q(x,y) y el nombre del sistema:\n")
    # Asignación de valores a los parámetros con manejo de errores
    epsilon = bde.obtener_numero_valido("epsilon = ")
    P_original   = bde.obtener_expresion_polinomial_valida("P(x,y) = ")
    Q_original = bde.obtener_expresion_polinomial_valida("Q(x,y) = ")
    P=bde.polinomio_a_matriz(P_original)
    Q=bde.polinomio_a_matriz(Q_original)
    if Q_original == "0":
        f1_original = "y"
    else:
        f1_original = "y"+"+" + str(epsilon) + "*(" + bde.hilbert_system(Q) + ")"
    if P_original == "0":
        f2_original = "-x"
    else:
        f2_original = "-x"+"+" + str(epsilon) + "*(" + bde.hilbert_system(P) + ")"
    nombre = input("Nombre del sistema = ")
    R = bde.average_system(epsilon*P,epsilon*Q) # Matriz de la ecuación promedio
    R_poly,R_coef = bde.polynomial_averaging(R) # Polinomio de la ecuación promedio
    theta_poly = "2*math.pi"
    print("\nDifferential equations system:\n")
    print(f"dx/dt = {f1_original}")
    print(f"dy/dt = {f2_original}")
    print(f"\nAverage differential equation system:\n\n r' = {R_poly}\ntheta' = {theta_poly}\n")
    print("\n> Selecciona una opción:\n")
    promediar, ciclo_limite = "n", "n"
    promediacion = input(" 1. Graficar el plano fase del sistema promediado\n 2. Graficar solo el/los ciclo/s límite/s del sistema promediado\n = ")
    while promediacion not in ["1", "2"]:
        print("⚠️  Error: Por favor, ingrese una opción válida.")
        promediacion = input(" = ")
    if promediacion == "1":
        promediar = "s"
    elif promediacion == "2":
        ciclo_limite = "s"
    graficar_polinomio = input("¿Desea graficar el polinomio promedio? (s/n): ").lower()
###############################################################################
# CONFIGURACIONES
print("\n> Configuraciones:\n")
tiempo_negativo = input("¿Desea graficar el tiempo negativo? (s/n): ").lower()
linealizar = input("¿Desea linealizar el sistema? (s/n): ").lower()
nulclinas = input("¿Desea calcular las nulclinas? (s/n): ").lower()
###############################################################################
x, y = sp.symbols('x y')
f1 = eval(f1_original)
f2 = eval(f2_original)
###############################################################################
# JACOBIANO
if linealizar == "s": 
    # Calcular Jacobiano
    J = bde.calcular_jacobiano(f1, f2, [x, y])

    print("\n> Matriz Jacobiana del sistema:\n")
    sp.pprint(J)
    
    # Evaluar en un punto de equilibrio (ejemplo en (0,0))
    J_eq = J.subs({x: 0, y: 0})
    print("\n> Jacobiano evaluado en (0,0):\n")
    sp.pprint(J_eq)
    
    # Calcular valores propios (para análisis de estabilidad)
    eigenvals = J_eq.eigenvals()
    print("\n> Valores propios en (0,0):\n")
    sp.pprint(eigenvals)

    # Sistema linealizado
    f1_linealizado = str(np.array(J_eq)[0][0] * x + np.array(J_eq)[0][1] * y)
    f2_linealizado = str(np.array(J_eq)[1][0] * x + np.array(J_eq)[1][1] * y)
    print("\n> Sistema linealizado:\n")
    print(f"dx/dt = {f1_linealizado}")
    print(f"dy/dt = {f2_linealizado}")
###############################################################################
# NULCLINAS
if nulclinas == "s":
    # Calcular nulclinas
    nulclina_x = sp.solve(f1, y)  # Resuelve dx/dt = 0 para y
    nulclina_y = sp.solve(f2, y)  # Resuelve dy/dt = 0 para y

    print("\n> Nulclinas:\n")
    print(f"Nulclina de x (dx/dt = 0): y = {nulclina_x}")
    print(f"Nulclina de y (dy/dt = 0): y = {nulclina_y}")
###############################################################################

###############################################################################
# GRAFICAR EL CAMPO VECTORIAL
print("\n> Límites de la gráfica:\n")
Lx_inf = bde.obtener_numero_valido("Límite inferior de x: ")
Lx_sup = bde.obtener_numero_valido("Límite superior de x: ")
# Manejo de errores
while Lx_inf >= Lx_sup:
    print("⚠️  Error: El límite inferior de x debe ser menor que el límite superior.")
    Lx_inf = bde.obtener_numero_valido("Límite inferior de x: ")
    Lx_sup = bde.obtener_numero_valido("Límite superior de x: ")
Ly_inf = bde.obtener_numero_valido("Límite inferior de y: ")
Ly_sup = bde.obtener_numero_valido("Límite superior de y: ")
# Manejo de errores
while Ly_inf >= Ly_sup:
    print("⚠️  Error: El límite inferior de y debe ser menor que el límite superior.")
    Ly_inf = bde.obtener_numero_valido("Límite inferior de y: ")
    Ly_sup = bde.obtener_numero_valido("Límite superior de y: ")
n = bde.obtener_numero_valido("\n> Número de puntos: ",tipo="int")  # Número de puntos en cada lado de la cuadrícula
x_grid = np.linspace(Lx_inf, Lx_sup, n)  # Crea un vector de n puntos entre -L y L
y_grid = np.linspace(Ly_inf, Ly_sup, n)  # Crea un vector de n puntos entre -L y L
X, Y = np.meshgrid(x_grid, y_grid)  # Crea la cuadrícula

# Convertir las expresiones en funciones evaluables
f1_func = sp.lambdify((x, y), f1, 'numpy')
f2_func = sp.lambdify((x, y), f2, 'numpy')

# Calcula las derivadas en cada punto de la cuadrícula
dX = f1_func(X, Y)
dY = f2_func(X, Y)

# Verificar que dX y dY sean matrices de números válidos
if not np.all(np.isfinite(dX)) or not np.all(np.isfinite(dY)):
    raise ValueError("Las derivadas contienen valores no finitos (NaN o inf).")

# Graficar el campo vectorial
fig, ax = plt.subplots(figsize=(10, 10))
q = ax.quiver(X, Y, dX, dY, units='x', pivot='tip', width=0.009, scale=30)
ax.quiverkey(q, 0.9, 0.9, 1, label='Plano fase', labelpos='E', coordinates='figure')
ax.set_title(f'{nombre}')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_xlim(Lx_inf, Lx_sup)
ax.set_ylim(Ly_inf, Ly_sup)
plt.legend()
plt.grid(True)

###############################################################################
# GRAFICAR LAS NULCLINAS
if nulclinas == "s":
    v = np.linspace(Lx_inf, Lx_sup, 500)
    
    # Nulclina de x
    for sol in nulclina_x:
        y_values = sp.lambdify(x, sol, 'numpy')(v)
        if np.isscalar(y_values):  # Si es escalar, crear arreglo
            y_values = np.full_like(v, y_values)
        plt.plot(v, y_values, label=f"Nulclina de x: {sol}", color="blue", linestyle="--")
    
    # Nulclina de y
    for sol in nulclina_y:
        y_values = sp.lambdify(x, sol, 'numpy')(v)
        if np.isscalar(y_values):
            y_values = np.full_like(v, y_values)
        plt.plot(v, y_values, label=f"Nulclina de y: {sol}", color="red", linestyle="--")

###############################################################################
# Configuración del gráfico
plt.axhline(0, color="gray", linestyle="--", linewidth=0.5)
plt.axvline(0, color="gray", linestyle="--", linewidth=0.5)

###############################################################################
# Crear un mapa de colores personalizado
print("\n> Colores de las trayectorias del sistema original:\n")
custom_cmap = LinearSegmentedColormap.from_list("naranja_a_morado", ["orange", "blue"])
if tiempo_negativo == "s":
    print(f"En tiempo negativo: Amarillo a morado")
    custom_cmap_neg = LinearSegmentedColormap.from_list("amarillo_a_morado", ["yellow", "purple"])
if seleccionar_sistema == "3" and promediar == "s":
    print("\n> Colores de las trayectorias del sistema promedio:\n")
    print(f"En tiempo positivo: Cyan a verde")
    custom_cmap_polar = LinearSegmentedColormap.from_list("amarillo_a_azul", ["cyan", "green"])
    if tiempo_negativo == "s":
        print(f"En tiempo negativo: Rosa a rojo")
        custom_cmap_polar_neg = LinearSegmentedColormap.from_list("rosa_a_rojo", ["pink", "red"])
if linealizar == "s":
    print("\n> Colores de las trayectorias del sistema linealizado:\n")
    print(f"En tiempo positivo: Verde")
    if tiempo_negativo == "s":
        print(f"En tiempo negativo: Cyan")

print("\n> Coordenadas del punto seleccionado:\n")
# CLICKS
z0 = []
z0_polar = []

# Plano fase del sistema promedio
if seleccionar_sistema == "3" and ciclo_limite == "s":
    # Encontrar y mostrar las raíces del polinomio
    raices = np.roots(R_coef)
    # Raices positivas
    raices_positivas = raices[raices > 0]
    print("Raíces positivas del polinomio:", raices_positivas)
    # Graficar circunferencias
    for raiz in raices_positivas:
        circulo = plt.Circle((0, 0), raiz, fill=False, color='black', linestyle='--', linewidth=2)
        ax.add_artist(circulo)

# Función que maneja el evento de clic
def onclick(event):
    if event.inaxes:
        x, y = event.xdata, event.ydata
        r = np.sqrt(x**2 + y**2)
        theta = np.arctan2(y, x)
        print(f"Coordenada seleccionada: ({x:.2f}, {y:.2f})")
        z0.append((x, y))
        y0 = [x, y]
        z0_polar.append((r, theta))
        r0 = [r,theta]
  
        # Marcar el punto en la gráfica
        ax.plot(x, y, 'ro')  # Punto rojo
        
        # Plano fase del sistema original
        z_rk = bde.runge_kutta(f1_original, f2_original, y0, tamaño_paso, pasos_rk, parametros)
        x_rk = z_rk[0, :]
        y_rk = z_rk[1, :]

        # Crear un gradiente para la trayectoria original
        points = np.array([x_rk, y_rk]).T.reshape(-1, 1, 2)
        segments = np.concatenate([points[:-1], points[1:]], axis=1)
        norm = plt.Normalize(0, len(x_rk))
        lc = LineCollection(segments, cmap=custom_cmap, norm=norm)  # Usar el mapa personalizado
        lc.set_array(np.arange(len(x_rk)))
        lc.set_linewidth(2)
        ax.add_collection(lc)

        # Plano fase del sistema original con tiempo negativo
        if tiempo_negativo == "s":
            z_rk_neg = bde.runge_kutta(f1_original, f2_original, y0, -tamaño_paso, pasos_rk, parametros)
            x_rk_neg = z_rk_neg[0, :]
            y_rk_neg = z_rk_neg[1, :]

            # Crear un gradiente para la trayectoria original con tiempo negativo
            points = np.array([x_rk_neg, y_rk_neg]).T.reshape(-1, 1, 2)
            segments = np.concatenate([points[:-1], points[1:]], axis=1)
            norm = plt.Normalize(0, len(x_rk_neg))
            lc = LineCollection(segments, cmap=custom_cmap_neg, norm=norm)  # Usar el mapa personalizado
            lc.set_array(np.arange(len(x_rk_neg)))
            lc.set_linewidth(2)
            ax.add_collection(lc)

        
            
        if seleccionar_sistema == "3" and promediar == "s":
            z_rk_polar = bde.runge_kutta(R_poly, theta_poly, r0, tamaño_paso, pasos_rk,type="polar")
            r_rk_polar = z_rk_polar[0, :]
            theta_rk_polar = z_rk_polar[1, :]
            x_rk_polar = r_rk_polar * np.cos(theta_rk_polar)
            y_rk_polar = r_rk_polar * np.sin(theta_rk_polar)
             
            # Crear un gradiente para la trayectoria polar
            points = np.array([x_rk_polar, y_rk_polar]).T.reshape(-1, 1, 2)
            segments = np.concatenate([points[:-1], points[1:]], axis=1)
            norm = plt.Normalize(0, len(x_rk_polar))
            lc = LineCollection(segments, cmap=custom_cmap_polar, norm=norm)  # Usar el mapa personalizado
            lc.set_array(np.arange(len(x_rk_polar)))
            lc.set_linewidth(2)
            ax.add_collection(lc)

            # Plano fase del sistema promedio con tiempo negativo
            if tiempo_negativo == "s":
                z_rk_polar_negativo = bde.runge_kutta(R_poly, theta_poly, r0, -tamaño_paso, pasos_rk,type="polar")
                r_rk_polar_negativo = z_rk_polar_negativo[0, :]
                theta_rk_polar_negativo = z_rk_polar_negativo[1, :]
                x_rk_polar_negativo = r_rk_polar_negativo * np.cos(theta_rk_polar_negativo)
                y_rk_polar_negativo = r_rk_polar_negativo * np.sin(theta_rk_polar_negativo)
             
                # Crear un gradiente para la trayectoria polar
                points = np.array([x_rk_polar_negativo, y_rk_polar_negativo]).T.reshape(-1, 1, 2)
                segments = np.concatenate([points[:-1], points[1:]], axis=1)
                norm = plt.Normalize(0, len(x_rk_polar_negativo))
                lc = LineCollection(segments, cmap=custom_cmap_polar_neg, norm=norm)  # Usar el mapa personalizado
                lc.set_array(np.arange(len(x_rk_polar_negativo)))
                lc.set_linewidth(2)
                ax.add_collection(lc)
       
        # Plano fase del sistema linealizado
        if linealizar == "s":
            z_rk_lineal=bde.runge_kutta(f1_linealizado,f2_linealizado,y0,tamaño_paso,pasos_rk,parametros)
            x_rk_lineal=z_rk_lineal[0,:]
            y_rk_lineal=z_rk_lineal[1,:]
            plt.plot(x_rk_lineal, y_rk_lineal, color='green')
        
            # Plano fase del sistema linealizado con tiempo negativo
            if tiempo_negativo == "s":
                z_rk_lineal_negativo=bde.runge_kutta(f1_linealizado,f2_linealizado,y0,-tamaño_paso,pasos_rk,parametros)
                x_rk_lineal_negativo=z_rk_lineal_negativo[0,:]
                y_rk_lineal_negativo=z_rk_lineal_negativo[1,:]
                plt.plot(x_rk_lineal_negativo, y_rk_lineal_negativo, color='cyan')
        
        fig.canvas.draw()  # Actualizar la gráfica inmediatamente

# Código principal
if __name__ == "__main__":
    # Conectar el evento de clic a la función onclick
    cid = fig.canvas.mpl_connect('button_press_event', onclick)
    fig.canvas.mpl_connect('key_press_event', bde.on_key_press)
    
    # Segunda parte: Gráfica del polinomio
    if seleccionar_sistema == "3":
        if graficar_polinomio == "s":
            # Encontrar y mostrar las raíces del polinomio
            raices = np.roots(R_coef)
            # Raices positivas
            raices_positivas = raices[raices > 0]
            max = max(raices_positivas)
            bde.graficar_polinomio(R_coef,(0,1.01*max),raices=raices_positivas)
    
    # Mostrar la gráfica
    plt.show()
    input("Presiona Enter para cerrar...")

